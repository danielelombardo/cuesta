#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&caps_word { continue-list = <MINUS UNDERSCORE BSPC DEL LEFT RIGHT DOT COMMA SEMI SLASH>; };
&sk { release-after-ms = <3000>; quick-release; ignore-modifiers; };
&sl { release-after-ms = <3000>; };

#define AZ  0
#define NS  1
#define FU  2
#define NV  3
#define NVM  4
#define NVL  5

#define xxxx &none
#define ____ &trans
#define ASH(l) &tkp LS(l) l 
#define ssh(l) &skp LS(l) l 
#define ks(l) &ksk l l 
#define PARS &skp RPAR LPAR

#define VX &tkp LC(X) LC(V)
#define CZ &tkp LC(Z) LC(C)
#define DELWRD LC(BSPC)
#define WRD_N RC(RIGHT)
#define WRD_P LC(LEFT)
#define TAB_N RA(RIGHT)
#define TAB_P LA(LEFT)


#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1400  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 30    // 10

#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>

&mmv {
  acceleration-exponent = <1>;      // 1
  time-to-max-speed-ms = <800>;    // 40
  delay-ms = <0>;                   // 0
};

&msc {
  acceleration-exponent = <1>;      // 0
  time-to-max-speed-ms = <40>;    // 500
  delay-ms = <0>;                   // 10
};

#define MOU_U &mmv MOVE_UP
#define MOU_D &mmv MOVE_DOWN
#define MOU_L &mmv MOVE_LEFT
#define MOU_R &mmv MOVE_RIGHT
#define SCR_U &msc SCRL_UP 
#define SCR_D &msc SCRL_DOWN
#define MCK_L &mkp LCLK 
#define MCK_R &mkp RCLK 



/ { 
    macros {
        rls_mods: rls_mods { compatible = "zmk,behavior-macro"; label = "ZM_rls_mods"; #binding-cells = <0>; wait-ms = <5>; tap-ms = <15>;
            bindings = <&macro_release &kp LSHFT &kp LCTRL &kp LALT &kp LGUI &kp RSHFT &kp RCTRL &kp RALT &kp RGUI>; };
        rst_all:  rst_all  { compatible = "zmk,behavior-macro"; label = "ZM_rst_all"; #binding-cells = <0>; wait-ms = <5>; tap-ms = <15>;
            bindings = <&macro_release &kp LSHFT &kp LCTRL &kp LALT &kp LGUI &kp RSHFT &kp RCTRL &kp RALT &kp RGUI>, <&macro_tap &to 0>; };
        dot_spc:  dot_spc  { compatible = "zmk,behavior-macro"; label = "ZM_dot_spc"; #binding-cells = <0>; wait-ms = <5>; tap-ms = <15>;
            bindings = <&macro_tap &kp DOT &kp SPACE &sk LSHFT>; };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        nav_mom  { if-layers = <4>; then-layer = <3>; };
        nav_lock { if-layers = <5>; then-layer = <3>; };
    };

    behaviors {
        mk:  moml_kp      { compatible = "zmk,behavior-hold-tap"; label = "MOML_KP";      #binding-cells = <2>; flavor = "tap-preferred"; tapping-term-ms = <200>; bindings = <&mo>, <&kp>; }; 
        tkp: two_kp       { compatible = "zmk,behavior-hold-tap"; label = "TWO_KP";       #binding-cells = <2>; flavor = "tap-preferred"; tapping-term-ms = <175>; bindings = <&kp>, <&kp>; }; 
        skp: slow_two_kp  { compatible = "zmk,behavior-hold-tap"; label = "SLOW_TWO_KP";  #binding-cells = <2>; flavor = "tap-preferred"; tapping-term-ms = <200>; bindings = <&kp>, <&kp>; }; 
        ksk: kp_sk        { compatible = "zmk,behavior-hold-tap"; label = "KP_SK";        #binding-cells = <2>; flavor = "tap-preferred"; tapping-term-ms = <200>; bindings = <&kp>, <&sk>; }; 
        mmd: moml_macro   { compatible = "zmk,behavior-hold-tap"; label = "MOML_MACRO";   #binding-cells = <2>; flavor = "tap-preferred"; tapping-term-ms = <200>; bindings = <&mo>, <&dot_spc>; }; 
    };
  
    keymap {
        compatible = "zmk,keymap";
        abc {
            label = "abc";
            bindings = <
                &kp ESC    ASH(Q)  ASH(W)  ASH(D)  ASH(F)  ASH(G)          &rst_all     ASH(J)  ASH(U)  ASH(P)  ASH(DEL)  &tog 2
                &kp TAB    ASH(A)  ASH(S)  ASH(R)  ASH(T)  ASH(B)          &key_repeat  ASH(H)  ASH(E)  ASH(I)  ASH(O)    &tog 1
                &kp ENTER  ssh(Y)  ssh(X)  ssh(C)  ssh(V)  ssh(Z)          &caps_word   ssh(N)  ssh(M)  ssh(K)  ssh(L)    &dot_spc
                ks(LSHFT)  ks(LCTRL) ks(LGUI) ks(LALT)  &mk 4 BSPC              &mk 1 SPACE  &kp TAB  &kp ESC  &kp ENTER  &sl 6
            >; 
        };

        nsy {
            label = "123";
            bindings = <
                ____ &tog 2     ASH(BSLH)  ASH(GRAVE)  xxxx   &rst_all      ____     xxxx    ASH(LBKT)  ASH(RBKT)  ____     ____
                ____ ASH(N1)     ASH(N2)    ASH(N3)  ASH(N4)  ASH(N5)     ASH(N6)  ASH(N7)    ASH(N8)    ASH(N9)   ASH(N0)  ____
                ____ ASH(MINUS) ASH(EQUAL)   xxxx   ASH(SLASH) xxxx       &kp CAPS ssh(SQT)  ssh(SEMI)  ssh(COMMA) ssh(DOT) ____
                ____ ____  ____  ____  ____                                                        &tog 1  ____  ____  ____  ____
            >;
        };

        fun {
            label = "func";
            bindings = <
                ____ &tog 2  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &rst_all    ____ xxxx &kp C_BRI_DN &kp C_BRI_UP xxxx ____
                ____ &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                      &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  ____
                ____ &kt LSHFT  &kt LCTRL  &kt LGUI  &kt LALT  xxxx              xxxx    xxxx    xxxx   &kp F11  &kp F12  ____
                ____ ____  ____  ____  ____                                                     &tog 2  ____  ____  ____  ____
            >;
        };

        nav { 
            label = " # ";
            bindings = <
                ____  xxxx      xxxx   MOU_U  &kp PSCRN  &rst_all        ____  &kp HOME   &kp UP     &kp END   ____  ____
                ____  MCK_L     MOU_L  MOU_D  MOU_R  &key_repeat         ____  &kp LEFT   &kp DOWN   &kp RIGHT xxxx  ____
                ____  &tog 5    MCK_R  SCR_U  SCR_D  &kp K_APP           xxxx  &kp PG_UP  &kp PG_DN  &kp INS   xxxx  ____
                ____  ks(RCTRL) ks(RGUI) ks(RALT)  ____                           &tkp RSHFT SPACE  ____  ____  ____  ____
            >;
        };

        navm { 
            label = " # ";
            bindings = <
                ____  ____  ____  ____  ____  ____     ____  ____  ____  ____  ____  ____ 
                ____  ____  ____  ____  ____  ____     ____  ____  ____  ____  ____  ____ 
                ____  ____  ____  ____  ____  ____     ____  ____  ____  ____  ____  ____ 
                ____  ____  ____  ____  ____                 ____  ____  ____  ____  ____ 
            >;
        };

        navl { 
            label = "/#/";
            bindings = <
                ____  ____  ____  ____  ____  ____     ____  ____  ____  ____  ____  ____ 
                ____  ____  ____  ____  ____  ____     ____  ____  ____  ____  ____  ____ 
                ____  ____  ____  ____  ____  ____     ____  ____  ____  ____  ____  ____ 
                ____  ____  ____  ____  ____                 ____  ____  ____  ____  ____ 
            >;
        };

        mod { 
            label = "perMods";
            bindings = <
                ____  ____  ____  ____  ____  ____                   ____  ____  ____  ____  ____  ____ 
                ____  ____  ____  ____  ____  ____                   ____  ____  ____  ____  ____  ____ 
                ____  ____  ____  ____  ____  ____                   ____  ____  ____  ____  ____  ____ 
                &kt LSHFT  &kt LCTRL  &kt LGUI  &kt LALT &rst_all    &rst_all  &kt RALT  &kt RGUI  &kt RCTRL  &kt RSHFT  
            >;
        };

    };
};